#!/usr/bin/env bash

# rbenv
if is-executable rbenv; then
	eval "$(rbenv init -)"
fi

# Homebrew
if is-executable brew; then
	eval "$(brew shellenv)"
fi

# TheFuck
# if is-executable thefuck; then
# 	eval $(thefuck --alias)
# 	eval $(thefuck --alias fix)
# fi

# Spotify TUI
# if is-executable spt; then
# 	# eval $(spt --completions $(basename $(ps -o args= -p $$)))
# 	eval $(spt --completions bash)
# fi

# Starship
# if is-executable starship; then
# 	eval $(starship init $(ps -o args= -p $$))
# fi

# FNM
if is-executable fnm; then
	eval "$(fnm env 2> /dev/null)"
fi

# pyenv
if is-executable pyenv; then
	eval "$(pyenv init -)" &>/dev/null
fi

# Fasd
# https://github.com/clvv/fasd#install
if is-executable fasd; then
	fasd_cache="$HOME/.fasd-init-bash"
	if [ "$(command -v fasd)" -nt "$fasd_cache" -o ! -s "$fasd_cache" ]; then
	fasd --init posix-alias bash-hook bash-ccomp bash-ccomp-install >| "$fasd_cache"
	fi
	. "$fasd_cache"
	unset fasd_cache
fi

# find-the-command
# If the OS is Linux and the distro is Arch,
# then source the find-the-command script with given parameters and current shell.
if [[ "$OSTYPE" == "linux-gnu" ]] && [[ -f "/etc/arch-release" ]]; then
	# If shell is Bash, then source bash script
	if [[ "$SHELL" == "/bin/bash" ]]; then
		source /usr/share/doc/find-the-command/ftc.bash quiet su noupdate noprompt
	fi
fi