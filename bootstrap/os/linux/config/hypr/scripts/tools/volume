#!/usr/bin/env bash

# This script is used to control the volume of the system.
# It is usually called by the volume widget in the status bar
# but can also be called by the user manually.
# Uses pactl to control the volume.

# Function to get the current volume
function get_volume() {
    # Get the volume from the current sink
    volume=$(pamixer --get-volume)

    # Check if mute is enabled
    mute=$(pamixer --get-mute)

    # If mute is enabled, then return 0
    if [[ $mute = "true" ]]; then
        echo 0
    else 
        echo $volume
    fi
}

# Function to set the volume
function set_volume() {
    # Get the volume from the first argument
    volume=$1

    # Set the volume
    pactl set-sink-volume @DEFAULT_SINK@ $volume%

    # Return the volume
    echo $volume
}

# Function to increase the volume
function increase_volume() {
    # Increase the volume by 5%
    pactl set-sink-volume @DEFAULT_SINK@ +5%

    # Get the current volume
    volume=$(get_volume)

    # Return the volume
    echo $volume
}

# Function to decrease the volume
function decrease_volume() {
    # Decrease the volume by 5%
    pactl set-sink-volume @DEFAULT_SINK@ -5%

    # Get the current volume
    volume=$(get_volume)

    # Return the volume
    echo $volume
}

# Function to toggle the mute status
function toggle_mute() {
    # Toggle mute
    pactl set-sink-mute @DEFAULT_SINK@ toggle

    # Get the current mute status
    mute=$(pactl list sinks | grep "Mute:" | awk '{print $2}')

    # Omit the first 3 words in $mute
    mute=${mute:9}
    
    if [[ $mute = "yes" ]]; then
        wob_volume 0
    else
        wob_volume
    fi
}

# Function to get the current icon for the volume
function get_icon() {
    # Get the current volume
    volume=$(get_volume)

    # Get the current mute status
    mute=$(pactl list sinks | grep "Mute:" | awk '{print $2}')

    # Omit the first 3 words in $mute
    mute=${mute:9}

    # If the volume is 0 or the mute status is yes, then return the mute icon
    if [[ $volume -eq 0 ]] || [[ $mute = "yes" ]]; then
        echo "ﱝ"
    # If the volume is between 0 and 30, then return the low volume icon
    elif [[ $volume -ge 0 ]] && [[ $volume -le 30 ]]; then
        echo "奄"
    # If the volume is between 30 and 60, then return the medium volume icon
    elif [[ $volume -ge 30 ]] && [[ $volume -le 60 ]]; then
        echo "奔"
    # If the volume is between 60 and 100, then return the high volume icon
    elif [[ $volume -ge 60 ]] && [[ $volume -le 100 ]]; then
        echo "墳"
    fi
}

# Function to call wob with the current volume
function wob_volume() {
    # If function is called with an argument, then use that as the volume
    if [ $# -eq 1 ]; then
        volume=$1
    else
        # Get the current volume
        volume=$(get_volume)
    fi

    # Call wob with the current volume
    echo $volume > /tmp/wobpipe
}

# Get the first argument
arg=$1

# If the first argument is "set", then set the volume to the second argument
if [[ $arg = "set" ]]; then
    # Get the second argument
    volume=$2

    # Set the volume
    set_volume $volume

    # Call wob with the current volume
    wob_volume

    # Exit the script
    exit 0
fi

# If the first argument is "+", "inc", or "increase", then increase the volume
if [[ $arg = "+" ]] || [[ $arg = "inc" ]] || [[ $arg = "increase" ]]; then
    # Increase the volume
    increase_volume

    # Call wob with the current volume
    wob_volume

    # Exit the script
    exit 0
fi

# If the first argument is "-", "dec", or "decrease", then decrease the volume
if [[ $arg = "-" ]] || [[ $arg = "dec" ]] || [[ $arg = "decrease" ]]; then
    # Decrease the volume
    decrease_volume

    # Call wob with the current volume
    wob_volume

    # Exit the script
    exit 0
fi

# If the first argument is "mute", then toggle the mute status
if [[ $arg = "mute" ]]; then
    # Toggle the mute status
    toggle_mute

    # Call wob with the current volume
    wob_volume 0

    # Exit the script
    exit 0
fi

if [[ $arg = "icon" ]]; then
    # Get the current icon
    icon=$(get_icon)

    # Print the current icon
    echo $icon

    # Exit the script
    exit 0
fi

# If the first argument is "get", then get the current volume
if [[ $arg = "get" ]]; then
    # Get the current volume
    volume=$(get_volume)

    # Print the current volume
    echo $volume

    # Exit the script
    exit 0
fi
