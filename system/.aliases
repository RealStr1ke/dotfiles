#!/usr/bin/env bash

# ----------------------------
# |        Shortcuts         |
# ----------------------------
alias reload="source $HOME/.bash_profile"
alias _="sudo"
alias g="git"
alias push="git push"

# ----------------------------
# |     Safety Features      |
# ----------------------------

# Safety Features (Confirm before overwriting)
alias rm='rm -I'     # 'rm -i' prompts for every file
alias cp='cp -i'
alias mv='mv -i'
alias ln='ln -i'

# More Safety Features
alias chown='chown --preserve-root'
alias chmod='chmod --preserve-root'
alias chgrp='chgrp --preserve-root'


# ----------------------------
# |        Languages         |
# ----------------------------

# Python
alias 2to="2to3"
alias idle="idle3"
alias pip="pip3"
alias pydoc="pydoc3"
alias python="python3"
alias python-config="python3-config"
alias wheel="wheel3"
alias py="python3"


# ----------------------------
# |    Package Management    |
# ----------------------------

# Homebrew
alias brewu='brew update && brew upgrade && brew cleanup && brew doctor'
alias bi='brew install'

# Yarn
alias yi='yarn install'

# npm
alias ni="npm install"
alias nu="npm uninstall"
alias nup="npm update"
alias nri="rm -r node_modules && npm install"
alias ncd="npm-check -su"


# ----------------------------
# |        Date/Time         |
# ----------------------------

# Date
alias date_iso_8601='date "+%Y%m%dT%H%M%S"'
alias date_clean='date "+%Y-%m-%d"'
alias date_year='date "+%Y"'
alias date_month='date "+%m"'
alias date_week='date "+%V"'
alias date_day='date "+%d"'
alias date_hour='date "+%H"'
alias date_minute='date "+%M"'
alias date_second='date "+%S"'
alias date_time='date "+%H:%M:%S"'

# Stopwatch
alias timer='echo "Timer started. Stop with Ctrl-D." && date && time cat && date'


# ----------------------------
# |  File/Folder Management  |
# ----------------------------

# Directory Traversal
alias ..="cd .."
alias ...="cd ../.."
alias ....="cd ../../.."
alias .....="cd ../../../.."
alias ~="cd ~" # `cd` is probably faster to type though
alias -- -="cd -"

# Directory Listing
alias ls="ls --color=auto"
alias l="ls -CF"
alias la="ls -A"
alias ll="ls -alF"
alias ld="ls -ld */"

# Grep Coloring
alias grep="grep --color=auto"
alias egrep="egrep --color=auto"
alias fgrep="fgrep --color=auto"

# Zippin
alias gz='tar -zcvf'

# Open dotfiles directory
alias dfs="cd $DOTFILES"

# Recursively remove given folder
alias rr="rm -rf"

# Recursively copy given folder into new directory
alias cpr="cp -rf"

# Turn given file into executable (chmod alias)
alias chmox='chmod -x'

# Recursively remove .DS_Store files
alias cleanupds="find . -type f -name '*.DS_Store' -ls -delete"

# Recursively remove .spotdl-cache files
alias cleanupspdl='find . -type f -name '\''.spotdl-cache'\'' -ls -delete'


# ----------------------------
# |        Networking        |
# ----------------------------
alias ip="dig +short myip.opendns.com @resolver1.opendns.com"
alias localip="ipconfig getifaddr en0"
alias ips="ifconfig -a | grep -o 'inet6\? \(addr:\)\?\s\?\(\(\([0-9]\+\.\)\{3\}[0-9]\+\)\|[a-fA-F0-9:]\+\)' | awk '{ sub(/inet6? (addr:)? ?/, \"\"); print }'"

# API Requests
# One of @janmoesen’s ProTip™s
for method in GET HEAD POST PUT DELETE TRACE OPTIONS; do
	alias "${method}"="lwp-request -m '${method}'"
done
unset method


# ----------------------------
# |          Typos           |
# ----------------------------
alias breq="brew"


# ----------------------------
# |  Hardware/Software Info  |
# ----------------------------

# Pass options to free
alias meminfo="free -m -l -t"

# Get top process eating memory
alias psmem="ps -o time,ppid,pid,nice,pcpu,pmem,user,comm -A | sort -n -k 6"
alias psmem5="psmem | tail -5"
alias psmem10="psmem | tail -10"

# Get top process eating cpu
alias pscpu="ps -o time,ppid,pid,nice,pcpu,pmem,user,comm -A | sort -n -k 5"
alias pscpu5="pscpu5 | tail -5"
alias pscpu10="pscpu | tail -10"

# Shows the corresponding process to ...
alias psx="ps auxwf | grep "

# Shows the process structure to clearly
alias pst="pstree -Alpha"

# Shows all your processes
alias psmy="ps -ef | grep $USER"

# The load-avg
alias loadavg="cat /proc/loadavg"

# Show all partitions
alias partitions="cat /proc/partitions"

# Shows the disk usage of a directory legibly
alias du='du -kh'

# Show the biggest files in a folder first
alias du_overview='du -h | grep "^[0-9,]*[MG]" | sort -hr | less'

# Shows the complete disk usage to legibly
alias df='df -kTh'

# ----------------------------
# |           Fun            |
# ----------------------------
alias starwars="telnet towel.blinkenlights.nl"


# ----------------------------
# |      Miscellaneous       |
# ----------------------------
alias quit="exit"
alias cls="clear;ls"
alias cla="clear;la"
alias dec2hex='printf "%x\n" $1'
alias speedtest="wget -O /dev/null http://speed.transip.nl/100mb.bin"

# Reload the shell (i.e. invoke as a login shell)
alias reload="exec ${SHELL} -l"

# Print each PATH entry on a separate line
# alias path="$PATH" | tr ':' '\n'
alias path='echo -e ${PATH//:/\\n}'

# Removes duplicate PATH entries
alias dpath="printf %s "$PATH" | awk -v RS=: -v ORS=: '!arr[$0]++'"

# Enable aliases to be sudo-ed
alias sudo='sudo '

# Merge PDF files, preserving hyperlinks
# Usage: `mergepdf input{1,2,3}.pdf`
alias mergepdf='gs -q -dNOPAUSE -dBATCH -sDEVICE=pdfwrite -sOutputFile=_merged.pdf'


# ----------------------------
# |     Alias Completion     |
# ----------------------------

# Automatically add completion for all aliases to commands having completion functions
# source: http://superuser.com/questions/436314/how-can-i-get-bash-to-perform-tab-completion-for-my-aliases
alias_completion() {
  local namespace="alias_completion"

  # parse function based completion definitions, where capture group 2 => function and 3 => trigger
  local compl_regex='complete( +[^ ]+)* -F ([^ ]+) ("[^"]+"|[^ ]+)'
  # parse alias definitions, where capture group 1 => trigger, 2 => command, 3 => command arguments
  local alias_regex="alias ([^=]+)='(\"[^\"]+\"|[^ ]+)(( +[^ ]+)*)'"

  # create array of function completion triggers, keeping multi-word triggers together
  eval "local completions=($(complete -p | sed -rne "/$compl_regex/s//'\3'/p"))"
  (( ${#completions[@]} == 0 )) && return 0

  # create temporary file for wrapper functions and completions
  rm -f "/tmp/${namespace}-*.XXXXXXXXXX" # preliminary cleanup
  local tmp_file="$(mktemp "/tmp/${namespace}-${RANDOM}.XXXXXXXXXX")" || return 1

  # read in "<alias> '<aliased command>' '<command args>'" lines from defined aliases
  local line; while read line; do
    eval "local alias_tokens=($line)" 2>/dev/null || continue # some alias arg patterns cause an eval parse error
    local alias_name="${alias_tokens[0]}" alias_cmd="${alias_tokens[1]}" alias_args="${alias_tokens[2]# }"

    # skip aliases to pipes, boolan control structures and other command lists
    # (leveraging that eval errs out if $alias_args contains unquoted shell metacharacters)
    eval "local alias_arg_words=($alias_args)" 2>/dev/null || continue

    # skip alias if there is no completion function triggered by the aliased command
    [[ " ${completions[*]} " =~ " $alias_cmd " ]] || continue
    local new_completion="$(complete -p "$alias_cmd")"

    # create a wrapper inserting the alias arguments if any
    if [[ -n $alias_args ]]; then
     local compl_func="${new_completion/#* -F /}"; compl_func="${compl_func%% *}"
     # avoid recursive call loops by ignoring our own functions
     if [[ "${compl_func#_$namespace::}" == $compl_func ]]; then
       local compl_wrapper="_${namespace}::${alias_name}"
         echo "function $compl_wrapper {
           (( COMP_CWORD += ${#alias_arg_words[@]} ))
           COMP_WORDS=($alias_cmd $alias_args \${COMP_WORDS[@]:1})
           $compl_func
         }" >> "$tmp_file"
         new_completion="${new_completion/ -F $compl_func / -F $compl_wrapper }"
     fi
    fi

    # replace completion trigger by alias
    new_completion="${new_completion% *} $alias_name"
    echo "$new_completion" >> "$tmp_file"
  done < <(alias -p | sed -rne "s/$alias_regex/\1 '\2' '\3'/p")
  source "$tmp_file" && rm -f "$tmp_file"
}

if [ -n "$BASH_VERSION" ]; then
  alias_completion
fi

unset -f alias_completion
